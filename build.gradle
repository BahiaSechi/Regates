plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'java'
    id 'jacoco'
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

mainClassName = 'regates.mvp.view.MenuView'

repositories {
    mavenCentral()
    jcenter()
}

sourceSets.main {
    java.srcDir file('src/main/java')
}

javafx {
    version = "11"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics']
}

dependencies {
    implementation(
            [files("lib")]
    )
    implementation 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

    testImplementation(
            [group: 'junit', name: 'junit', version: '4.+'],
            ['org.mockito:mockito-core:2.+'],
            [files("lib")]
    )
    compile 'org.openjfx:javafx-base:11:linux'
    compile 'org.openjfx:javafx-controls:11:linux'
    compile 'org.openjfx:javafx-fxml:11:linux'
    compile 'org.openjfx:javafx-graphics:11:linux'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.11.3'

}

task copyLibFolder(type: Copy) {
    description 'Copies the lib folder.'
    from('lib')
    into("$buildDir/classes")
}

compileJava.dependsOn copyLibFolder

applicationDistribution.from(['LICENSE', 'README.md']) {
    into ''
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")

    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['regates/mvp/presenter/**', 'regates/mvp/view/**'])
        })
    }
}
targetCompatibility = '10'
sourceCompatibility = '10'